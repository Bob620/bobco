#!/usr/bin/env node

const app = require('../app');
const http = require('http');

process.stdin.resume();

let hasClosed = false;
function exitHandler(options) {
	if (!hasClosed) {
		hasClosed = true;
		console.log("Shutting down...");

		if (options.exit) {
			process.exit();
		}
	}
}

// do something when app is closing
process.on('exit', exitHandler.bind(null, { cleanup: true }));

// catches ctrl+c event
process.on('SIGINT', exitHandler.bind(null, { exit: true }));

// catches "kill pid"
process.on('SIGUSR1', exitHandler.bind(null, { exit: true }));
process.on('SIGUSR2', exitHandler.bind(null, { exit: true }));
process.on('SIGTERM', exitHandler.bind(null, { exit: true }));

// catches uncaught exceptions
process.on('uncaughtException', exitHandler.bind(null, { exit: false }));

let port = undefined;
for (let i = 0; i < process.argv.length; i++) {
	switch (process.argv[i]) {
		case '--port':
		case '-p':
			port = process.argv[++i];
			break;
	}
}

port = port || '9080';

app.set('port', port);
let server = http.createServer(app);

if (process.env.NODE_ENV !== 'production') {
	const debug = require('debug')('bobco:server');

	function onListening() {
		let addr = server.address();
		let bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	}

	server.on('listening', onListening);
}

server.listen(port);
server.on('error', onError);

/**
 * Event listener for HTTP server "error" event.
 * **From Express**
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}
